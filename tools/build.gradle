apply plugin: 'java'
apply plugin: 'maven-publish'

version = System.properties['project.version']

description = 'The resulting CCTools.jar and CSTools.jar repackage all third party libraries in a single jar for simplified start and version control. The resuling Server CSTools.jar is added to EARs'

def commonsLibDir = '../lib'
def jbossClientLibDir = '../jboss/client'
def glassfishLibDir = '../glassfishfacet/lib'

def archiveSpecifier = '-' + version + '.jar'
def tmpDir = 'build/tmp'

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')
}

repositories {
    mavenLocal()
}

publishing {
    publications {
        cctoolsJar(MavenPublication) {
            groupId 'org.adempiere'
            artifactId 'CCTools'
            version version

            artifact buildJarCCTools
        }
        cstoolsJar(MavenPublication) {
            groupId 'org.adempiere'
            artifactId 'CSTools'
            version version

            artifact buildJarCSTools
        }

        jbossJar(MavenPublication) {
            groupId 'org.adempiere'
            artifactId 'jboss'
            version version

            artifact buildJarJBoss
        }
        glassfishJar(MavenPublication) {
            groupId 'org.adempiere'
            artifactId 'glassfish'
            version version

            artifact buildJarGlassfish
        }
        mysqlJar(MavenPublication) {
            groupId 'org.adempiere'
            artifactId 'mysql-connector'
            version version

            artifact buildJarMySQL
        }
        oracleJar(MavenPublication) {
            groupId 'org.adempiere'
            artifactId 'oracle'
            version version

            artifact buildJarOracle
        }
        postgresqlJar(MavenPublication) {
            groupId 'org.adempiere'
            artifactId 'postgresql'
            version version

            artifact buildJarPostgresql
        }
    }
}

jar {
    manifest {
        attributes("Implementation-Title": "ADempiere Tools - Rel." + version,
                "Implementation-Version": version,
                "Implementation-Vendor": "ADempiere",
                "Implementation-URL": "http://www.adempiere.org"
        )
    }
}

task toolsDistribution {}

toolsDistribution.dependsOn {
    tasks.findAll {
        task -> task.name.startsWith('buildJar')
    }
}

task prepareCCToolsJar(type: Copy, dependsOn: 'compileJava') {

    destinationDir = new File(tmpDir + '/cctools')

    FileTree ft1 = fileTree(dir: commonsLibDir + '/client')

    ft1.each { File it1 ->

        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/INDEX.LIST'

        from zipTree(it1)
        into destinationDir
    }

    FileTree ft2 = fileTree(dir: '.', include: 'META-INF/services/**')

    from {
        ft2.each { it2 ->
            it2.isDirectory() ? it2 : zipTree(it2)
        }
    }

    FileTree ft3 = fileTree(dir: './build/classes/main', include: '**/apache/ecs/**')

    from {
        ft3.each { it3 ->
            it3.isDirectory() ? it3 : zipTree(it3)
        }
    }

    FileTree ft4 = fileTree(dir: './build/classes/main', include: 'it/**')

    from {
        ft3.each { it4 ->
            it4.isDirectory() ? it4 : zipTree(it4)
        }
    }
}

task buildJarCCTools(type: Jar, dependsOn: 'prepareCCToolsJar') {

    FileTree ft1 = fileTree(dir: tmpDir + '/cctools')

    from {
        ft1.each { it1 ->
            it1.isDirectory() ? it1 : zipTree(it1)
        }
    }

    archiveName = 'CCTools' + archiveSpecifier

    manifest {
        attributes("Implementation-Title": "Adempiere Client Tools (CCTOOLS) - " + version,
                "Implementation-Version": version,
                "Implementation-Vendor": "ADempiere",
                "Implementation-URL": "http://www.adempiere.org"
        )
    }
}

task prepareCSToolsJar(type: Copy, dependsOn: 'compileJava') {

    destinationDir = new File(tmpDir + '/cstools')

    FileTree ft1 = fileTree(dir: commonsLibDir + '/server')

    ft1.each { File it1 ->

        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/INDEX.LIST'

        from zipTree(it1)
        into destinationDir
    }


    FileTree ft2 = fileTree(dir: '.', include: 'META-INF/services/**')

    from {
        ft2.each { it2 ->
            it2.isDirectory() ? it2 : zipTree(it2)
        }
    }

    FileTree ft3 = fileTree(dir: './build/classes/main', include: '**/apache/ecs/**')

    from {
        ft3.each { it3 ->
            it3.isDirectory() ? it3 : zipTree(it3)
        }
    }
}

task buildJarCSTools(type: Jar, dependsOn: 'prepareCSToolsJar') {

    FileTree ft1 = fileTree(dir: tmpDir + '/cstools')

    from {
        ft1.each { it1 ->
            it1.isDirectory() ? it1 : zipTree(it1)
        }
    }

    archiveName = 'CSTools' + archiveSpecifier

    manifest {
        attributes("Implementation-Title": "Adempiere Server Tools (CSTOOLS) - " + version,
                "Implementation-Version": version,
                "Implementation-Vendor": "ADempiere",
                "Implementation-URL": "http://www.adempiere.org"
        )
    }
}

task prepareJBossJar(type: Copy) {

    destinationDir = new File(tmpDir + '/jboss')

    FileCollection fc = files([jbossClientLibDir + '/jboss-ejb3x.jar',
                               jbossClientLibDir + '/jboss-ejb3-client.jar',
                               jbossClientLibDir + '/jbossall-client.jar'
    ])

    fc.each { File it1 ->

        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/INDEX.LIST'

        from zipTree(it1)
        into destinationDir
    }
}

task buildJarJBoss(type: Jar, dependsOn: 'prepareJBossJar') {

    FileTree ft1 = fileTree(dir: tmpDir + '/jboss')

    from {
        ft1.each { it1 ->
            it1.isDirectory() ? it1 : zipTree(it1)
        }
    }

    archiveName = 'jboss' + archiveSpecifier

    manifest {
        attributes("Implementation-Title": "Adempiere JBoss Client - " + version,
                "Implementation-Version": version,
                "Implementation-Vendor": "ADempiere",
                "Implementation-URL": "http://www.adempiere.org"
        )
    }
}

task prepareGlassfishJar(type: Copy) {

    destinationDir = new File(tmpDir + '/glassfish')

    FileCollection fc = files([glassfishLibDir + '/appserv-admin.jar',
                               glassfishLibDir + '/appserv-deployment-client.jar',
                               glassfishLibDir + '/appserv-rt.jar',
                               glassfishLibDir + '/appserv-ext.jar',
                               commonsLibDir + '/server/javaee.jar'
    ])

    fc.each { File it1 ->

        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/INDEX.LIST'

        from zipTree(it1)
        into destinationDir
    }
}

task buildJarGlassfish(type: Jar, dependsOn: 'prepareGlassfishJar') {

    FileTree ft1 = fileTree(dir: tmpDir + '/glassfish')

    from {
        ft1.each { it1 ->
            it1.isDirectory() ? it1 : zipTree(it1)
        }
    }

    archiveName = 'glassfish' + archiveSpecifier

    manifest {
        attributes("Implementation-Title": "Adempiere GlassFish Client - " + version,
                "Implementation-Version": version,
                "Implementation-Vendor": "ADempiere",
                "Implementation-URL": "http://www.adempiere.org"
        )
    }
}

task prepareOracleJar(type: Copy) {

    destinationDir = new File(tmpDir + '/oracle')

    FileCollection fc = files([commonsLibDir + '/jdbc/ojdbc6.jar'])

    fc.each { File it1 ->

        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/INDEX.LIST'

        from zipTree(it1)
        into destinationDir
    }
}

task buildJarOracle(type: Jar, dependsOn: 'prepareOracleJar') {

    FileTree ft1 = fileTree(dir: tmpDir + '/oracle')

    from {
        ft1.each { it1 ->
            it1.isDirectory() ? it1 : zipTree(it1)
        }
    }

    archiveName = 'oracle' + archiveSpecifier

    manifest {
        attributes("Implementation-Title": "Adempiere Oracle - " + version,
                "Implementation-Version": version,
                "Implementation-Vendor": "ADempiere",
                "Implementation-URL": "http://www.adempiere.org"
        )
    }
}

task preparePostgresqlJar(type: Copy) {

    destinationDir = new File(tmpDir + '/postgresql')

    FileCollection fc = files([commonsLibDir + '/jdbc/postgresql.jar'])

    fc.each { File it1 ->

        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/INDEX.LIST'

        from zipTree(it1)
        into destinationDir
    }
}

task buildJarPostgresql(type: Jar, dependsOn: 'preparePostgresqlJar') {

    FileTree ft1 = fileTree(dir: tmpDir + '/postgresql')

    from {
        ft1.each { it1 ->
            it1.isDirectory() ? it1 : zipTree(it1)
        }
    }

    archiveName = 'postgresql' + archiveSpecifier

    manifest {
        attributes("Implementation-Title": "Adempiere PostgreSQL - " + version,
                "Implementation-Version": version,
                "Implementation-Vendor": "ADempiere",
                "Implementation-URL": "http://www.adempiere.org"
        )
    }
}

task prepareMySQLJar(type: Copy) {

    destinationDir = new File(tmpDir + '/mysql')

    FileCollection fc = files([commonsLibDir + '/jdbc/mysql-connector-java-5.1.13-bin.jar'])

    fc.each { File it1 ->

        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/INDEX.LIST'

        from zipTree(it1)
        into destinationDir
    }
}


task buildJarMySQL(type: Jar, dependsOn: 'prepareMySQLJar') {

    FileTree ft1 = fileTree(dir: tmpDir + '/mysql')

    from {
        ft1.each { it1 ->
            it1.isDirectory() ? it1 : zipTree(it1)
        }
    }

    archiveName = 'mysql-connector' + archiveSpecifier

    manifest {
        attributes("Implementation-Title": "Adempiere MySQL - " + version,
                "Implementation-Version": version,
                "Implementation-Vendor": "ADempiere",
                "Implementation-URL": "http://www.adempiere.org"
        )
    }
}
