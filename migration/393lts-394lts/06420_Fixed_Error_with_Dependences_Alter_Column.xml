<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Migrations>
  <Migration EntityType="ECA02" Name="Allows change column definition" ReleaseNo="3.9.4" SeqNo="6420">
    <Step DBType="Postgres" Parse="N" SeqNo="10" StepType="SQL">
      <SQLStatement>CREATE OR REPLACE FUNCTION get_all_views(tablename varchar)  
RETURNS TABLE (
    view_name varchar, 
    view_oid integer,
    level integer
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY SELECT dependent_view.relname as view_name, dependent_view.oid, dependent_view.level FROM (WITH RECURSIVE views AS (
				   -- get the directly depending views
				   SELECT v.oid::regclass AS view,
				          1 AS level, v.oid
				   FROM pg_depend AS d
				      JOIN pg_rewrite AS r
				         ON r.oid = d.objid
				      JOIN pg_class AS v
				         ON v.oid = r.ev_class
				   WHERE v.relkind = 'v'
				     AND d.classid = 'pg_rewrite'::regclass
				     AND d.refclassid = 'pg_class'::regclass
				     AND d.deptype = 'n'
				     AND d.refobjid = lower(tablename)::regclass
				UNION ALL
				   -- add the views that depend on these
				   SELECT v.oid::regclass,
				          views.level + 1, v.oid
				   FROM views
				      JOIN pg_depend AS d
				         ON d.refobjid = views.view
				      JOIN pg_rewrite AS r  
				         ON r.oid = d.objid
				      JOIN pg_class AS v    
				         ON v.oid = r.ev_class
				   WHERE v.relkind = 'v'   
				     AND d.classid = 'pg_rewrite'::regclass
				     AND d.refclassid = 'pg_class'::regclass
				     AND d.deptype = 'n'   
				     AND v.oid &lt;&gt; views.view  -- avoid loop
				)
				SELECT e.view::varchar as relname, e.oid::integer as oid, e.level::integer as level
				FROM views e
				GROUP BY e.view, e.oid, e.level
				ORDER BY e.level DESC) as dependent_view;
END $$;</SQLStatement>
      <RollbackStatement>DROP FUNCTION get_all_views</RollbackStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="20" StepType="SQL">
      <SQLStatement>DROP TABLE IF EXISTS t_alter_column;</SQLStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="30" StepType="SQL">
      <SQLStatement>create or replace function altercolumn(tablename name, columnname name, datatype name,
nullclause varchar, defaultclause varchar) returns void as $$
declare
   command text;
   viewtext text[];
   viewname name[];
   dropviews name[];
   i int;
   j int;
   v record;
   sqltype       text;
   sqltype_short text;
   typename name;
begin
   if datatype is not null then
	select pg_type.typname, format_type(pg_type.oid, pg_attribute.atttypmod)
        into typename, sqltype
        from pg_class, pg_attribute, pg_type
        where relname = lower(tablename)
        and relkind = 'r'
        and pg_class.oid = pg_attribute.attrelid
        and attname = lower(columnname)
        and atttypid = pg_type.oid;
        sqltype_short := sqltype;
        if typename = 'numeric' then
	   sqltype_short := replace(sqltype, ',0', '');
        elsif strpos(sqltype,'character varying') = 1 then
	   sqltype_short := replace(sqltype, 'character varying', 'varchar');
        elsif sqltype = 'timestamp without time zone' then
           sqltype_short := 'timestamp';
        end if;
        if lower(datatype) &lt;&gt; sqltype and lower(datatype) &lt;&gt; sqltype_short then
		i := 0;
		for v in SELECT a.view_name as relname, a.view_oid as oid FROM get_all_views(tablename::varchar) as a
		 loop
		    i := i + 1;
		    viewtext[i] := pg_get_viewdef(v.oid);
		    viewname[i] := v.relname;
		end loop;
		if i &gt; 0 then
		   begin
		     for j in 1 .. i loop
		        command := 'drop view ' || viewname[j];
		        raise notice 'drop view %', viewname[j];
		        execute command;
		        dropviews[j] := viewname[j];
		     end loop;
                     exception
                        when others then
                          i := array_upper(dropviews, 1);
                          if i &gt; 0 then
                             for j in i .. 1 loop
                             	raise notice 'create or replace view %', dropviews[j];
                                command := 'create or replace view ' || dropviews[j] || ' as ' || viewtext[j];
		                execute command;
                             end loop;
                          end if;
                          raise exception 'Failed to recreate dependent view';
                   end;
		end if;
		raise notice 'alter table % alter column % type %', lower(tablename), lower(columnname), lower(datatype);
		command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' type ' || lower(datatype);
		execute command;
                i := array_upper(dropviews, 1);
		if i &gt; 0 then
		   for j in REVERSE i .. 1 loop
		     raise notice 'create or replace view %', dropviews[j];
		     command := 'create or replace view ' || dropviews[j] || ' as ' || viewtext[j];
		     execute command;
		   end loop;
		end if;
        end if;
   end if;
   
   if defaultclause is not null then
       if lower(defaultclause) = 'null' then
	      raise notice 'alter table % alter column % drop default ', lower(tablename), lower(columnname);
          command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' drop default ';
       else
      raise notice 'alter table % alter column % set default %', lower(tablename), lower(columnname), defaultclause;
	  command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' set default ''' || defaultclause || '''';
       end if;
       execute command;
   end if;
   
   if nullclause is not null then
      if lower(nullclause) = 'not null' then
	      raise notice 'alter table % alter column % set not null ', lower(tablename), lower(columnname);
          command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' set not null';
          execute command;
      elsif lower(nullclause) = 'null' then
      	  raise notice 'alter table % alter column % drop not null ', lower(tablename), lower(columnname);
          command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' drop not null';
          execute command;
      end if;
   end if;
end;
$$ language plpgsql;</SQLStatement>
      <RollbackStatement>create or replace function altercolumn(tablename name, columnname name, datatype name,
nullclause varchar, defaultclause varchar) returns void as $$
declare
   command text;
   viewtext text[];
   viewname name[];
   dropviews name[];
   i int;
   j int;
   v record;
   sqltype       text;
   sqltype_short text;
   typename name;
begin
   if datatype is not null then
	select pg_type.typname, format_type(pg_type.oid, pg_attribute.atttypmod)
        into typename, sqltype
        from pg_class, pg_attribute, pg_type
        where relname = lower(tablename)
        and relkind = 'r'
        and pg_class.oid = pg_attribute.attrelid
        and attname = lower(columnname)
        and atttypid = pg_type.oid;
        sqltype_short := sqltype;
        if typename = 'numeric' then
	   sqltype_short := replace(sqltype, ',0', '');
        elsif strpos(sqltype,'character varying') = 1 then
	   sqltype_short := replace(sqltype, 'character varying', 'varchar');
        elsif sqltype = 'timestamp without time zone' then
           sqltype_short := 'timestamp';
        end if;
        if lower(datatype) &lt;&gt; sqltype and lower(datatype) &lt;&gt; sqltype_short then
		i := 0;
		for v in select a.relname, a.oid 
			from pg_class a, pg_depend b, pg_depend c, pg_class d, pg_attribute e
			where a.oid = b.refobjid
			and b.objid = c.objid
			and b.refobjid &lt;&gt; c.refobjid
			and b.deptype = 'n'
			and c.refobjid = d.oid
			and d.relname = lower(tablename)
			and d.relkind = 'r'
			and d.oid = e.attrelid
			and e.attname = lower(columnname)
			and c.refobjsubid = e.attnum
			and a.relkind = 'v'
		 loop
		    i := i + 1;
		    viewtext[i] := pg_get_viewdef(v.oid);
		    viewname[i] := v.relname;
		end loop;
		if i &gt; 0 then
		   begin
		     for j in 1 .. i loop
		        command := 'drop view ' || viewname[j];
		        execute command;
		        dropviews[j] := viewname[j];
		     end loop;
                     exception
                        when others then
                          i := array_upper(dropviews, 1);
                          if i &gt; 0 then
                             for j in 1 .. i loop
                                command := 'create or replace view ' || dropviews[j] || ' as ' || viewtext[j];
		                execute command;
                             end loop;
                          end if;
                          raise exception 'Failed to recreate dependent view';
                   end;
		end if;
		command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' type ' || lower(datatype);
		execute command;
                i := array_upper(dropviews, 1);
		if i &gt; 0 then
		   for j in 1 .. i loop
		     command := 'create or replace view ' || dropviews[j] || ' as ' || viewtext[j];
		     execute command;
		   end loop;
		end if;
        end if;
   end if;
   
   if defaultclause is not null then
       if lower(defaultclause) = 'null' then
          command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' drop default ';
       else
	  command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' set default ''' || defaultclause || '''';
       end if;
       execute command;
   end if;
   
   if nullclause is not null then
      if lower(nullclause) = 'not null' then
          command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' set not null';
          execute command;
      elsif lower(nullclause) = 'null' then
          command := 'alter table ' || lower(tablename) || ' alter column ' || lower(columnname) || ' drop not null';
          execute command;
      end if;
   end if;
end;
$$ language plpgsql;</RollbackStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="40" StepType="SQL">
      <SQLStatement>create table t_alter_column
( tablename name, columnname name, datatype name, nullclause varchar(10), defaultclause varchar(200));</SQLStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="50" StepType="SQL">
      <SQLStatement>create rule alter_column_rule as on insert to t_alter_column
do instead select altercolumn(new.tablename, new.columnname, new.datatype, new.nullclause,
new.defaultclause);</SQLStatement>
    </Step>
  </Migration>
</Migrations>
