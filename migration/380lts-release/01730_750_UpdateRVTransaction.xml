<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Migrations>
  <Migration EntityType="D" Name="UpdateRV_Transaction, field lowlevel" ReleaseNo="3.9.0" SeqNo="1730">
    <Comments>https://github.com/adempiere/adempiere/issues/750</Comments>
    <Step DBType="ALL" Parse="Y" SeqNo="10" StepType="SQL">
      <SQLStatement>DROP VIEW RV_M_Transaction_Costing;
DROP VIEW RV_Transaction;
CREATE OR REPLACE VIEW RV_TRANSACTION
AS
SELECT t.M_Transaction_ID, t.AD_Client_ID,t.AD_Org_ID,
    t.MovementType,t.MovementDate,t.MovementQty,
    -- Instance
    t.M_AttributeSetInstance_ID, asi.M_AttributeSet_ID, asi.SerNo, asi.Lot, asi.M_Lot_ID,asi.GuaranteeDate,
    -- Product
    t.M_Product_ID,p.Value,p.Name,p.Description,p.UPC,p.SKU,
    p.C_UOM_ID,p.M_Product_Category_ID,p.Classification, p.Weight,p.Volume,p.VersionNo,
    -- Locator
    t.M_Locator_ID, l.M_Warehouse_ID, l.X, l.Y, l.Z,
    -- Inventory
    t.M_InventoryLine_ID,il.M_Inventory_ID,
    -- Movement
    t.M_MovementLine_ID,ml.M_Movement_ID,
    -- In/Out
    t.M_InOutLine_ID,iol.M_InOut_ID,
    -- Production
    t.M_ProductionLine_ID,prdl.M_ProductionPlan_ID,prdl.M_Production_ID,
    -- ProjectIssue
    t.C_ProjectIssue_ID,
    t.PP_Cost_Collector_ID,
    COALESCE(il.Line,ml.Line,iol.Line,prdl.Line,pjl.Line) AS Line,
    COALESCE(i.movementdate, m.movementdate, io.dateacct, prd.movementdate, pjl.movementdate, cc.dateacct) AS dateacct,
    COALESCE(i.documentno, m.documentno, io.documentno, prd.name, pj.value, cc.documentno) AS documentno,
    COALESCE(i.c_doctype_id, m.c_doctype_id, io.c_doctype_id, 0, 0, cc.c_doctype_id) AS c_doctype_id,
    -- DIMENSION
    COALESCE(pjl.C_Project_ID, iol.C_Project_ID , i.C_Project_ID, m.C_Project_ID,cc.C_Project_ID) AS C_Project_ID,
    COALESCE(i.C_Activity_ID,iol.C_Activity_ID,m.C_Activity_ID, cc.C_Activity_ID) AS C_Activity_ID,
    COALESCE(i.C_Campaign_ID,iol.C_Campaign_ID, m.C_Campaign_ID) AS C_Campaign_ID,
    0 AS C_Region_ID,
    COALESCE(il.CreatedBy, io.C_BPartner_ID, m.C_BPartner_ID ) AS C_BPartner_ID,
    COALESCE(i.User1_ID, iol.User1_ID, m.User1_ID , cc.User1_ID) AS User1_ID,
    COALESCE(i.User2_ID, iol.User2_ID, m.User2_ID , cc.User2_ID) AS User2_ID,
    COALESCE(i.User3_ID, iol.User1_ID, m.User3_ID , cc.User3_ID) AS User3_ID,
    COALESCE(i.User4_ID, iol.User4_ID, m.User4_ID , cc.User4_ID) AS User4_ID,      
    p.lowlevel
FROM M_Transaction t
  INNER JOIN M_Locator l ON (t.M_Locator_ID=l.M_Locator_ID)
  INNER JOIN M_Product p ON (t.M_Product_ID=p.M_Product_ID)
  LEFT OUTER JOIN M_AttributeSetInstance asi ON (t.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID)
  LEFT OUTER JOIN M_InventoryLine il ON (t.M_InventoryLine_ID=il.M_InventoryLine_ID)
  LEFT OUTER JOIN M_Inventory i ON (il.m_inventory_id = i.m_inventory_id)
  LEFT OUTER JOIN M_MovementLine ml ON (t.M_MovementLine_ID=ml.M_MovementLine_ID)
  LEFT OUTER JOIN M_movement m ON (ml.m_movement_id = m.m_movement_id)
  LEFT OUTER JOIN M_InOutLine iol ON (t.M_InOutLine_ID=iol.M_InOutLine_ID)
  LEFT OUTER JOIN M_InOut io ON (iol.M_InOut_ID = io.M_InOut_ID)
  LEFT OUTER JOIN M_ProductionLine prdl ON (t.M_ProductionLine_ID=prdl.M_ProductionLine_ID)
  --LEFT OUTER JOIN M_ProductionPlan prdp ON (prdl.M_ProductionPlan_ID=prdp.M_ProductionPlan_ID)
  LEFT OUTER JOIN M_Production prd ON prdl.M_Production_ID = prd.M_Production_ID
  LEFT OUTER JOIN C_ProjectIssue pjl ON (t.C_ProjectIssue_ID=pjl.C_ProjectIssue_ID)
  LEFT OUTER JOIN C_Project pj ON pjl.C_Project_id = pj.C_Project_id
  LEFT OUTER JOIN PP_Cost_Collector cc ON t.PP_Cost_Collector_ID = cc.PP_Cost_Collector_ID;
  
CREATE OR REPLACE VIEW RV_M_Transaction_Costing AS
 SELECT
 t.M_Transaction_ID,
 t.AD_Client_ID,
 t.AD_Org_ID,
 t.MovementType,
 t.MovementDate,
 t.MovementQty,
 t.M_AttributeSetInstance_ID,
 t.M_AttributeSet_ID,
 t.SerNo,
 t.Lot,
 t.M_Lot_ID,
 t.GuaranteeDate,
 t.M_Product_ID,
 p.Value,
 p.Name,
 p.Description,
 p.UPC,
 p.SKU,
 p.C_UOM_ID,
 p.M_Product_Category_ID,
 p.Classification,
 p.Group1,
 p.Group2,
 p.Weight,
 p.Volume,
 p.VersionNo,
 t.DocumentNo,
 t.C_DocType_ID,
 t.M_Locator_ID,
 t.x,
 t.y,
 t.z,
 t.M_Warehouse_ID,
 t.M_InventoryLine_ID,
 t.M_Inventory_ID,
 t.M_Movementline_ID,
 t.M_Movement_ID,
 t.M_InOutline_ID,
 t.M_InOut_ID,
 t.M_ProductionLine_ID,
 t.M_ProductionPlan_ID,
 t.M_Production_ID,
 t.C_ProjectIssue_id,
 t.PP_Cost_Collector_ID,
 cd.C_LandedCostAllocation_ID,
 cd.C_AcctSchema_ID,
 cd.M_CostType_ID,
 cd.M_CostElement_iD,
 cd.SeqNo,
 cd.CostAdjustmentDate,
 cd.CostadjustmentDateLL,
 cd.DateAcct,
 cd.CumulatedQty AS BeginningQtyBalance,
 cd.CurrentcostPrice,
 cd.CurrentcostPriceLL,
 cd.IsReversal,
 cd.IsSOTrx,
 cd.M_CostDetail_ID,
 cd.CumulatedAmt + cd.CumulatedAmtLL AS BeginningBalance,
 cd.qty,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.amt * (-1)
            ELSE cd.amt
        END AS amt,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.amtll * (-1)
            ELSE cd.amtll
        END AS amtll,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.costamt * (-1)
            ELSE cd.costamt
        END AS costamt,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.costamtll * (-1)
            ELSE cd.costamtll
        END AS costamtll,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.costadjustment * (-1)
            ELSE cd.costadjustment
        END AS costadjustment,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.costadjustmentll * (-1)
            ELSE cd.costadjustmentll
        END AS costadjustmentll, cd.cumulatedamt, cd.cumulatedamtll, cd.cumulatedqty + cd.qty AS endingqtybalance, cd.cumulatedamt + cd.cumulatedamtll +
        CASE
            WHEN cd.qty &lt; 0 OR cd.qty = 0 AND cd.cumulatedqty &lt; 0 THEN cd.costamt * (-1)
            ELSE cd.costamt
        END +
        CASE
            WHEN cd.qty &lt; 0 OR cd.qty = 0 AND cd.cumulatedqty &lt; 0 THEN cd.costamtll * (-1)
            ELSE cd.costamtll
        END +
        CASE
            WHEN cd.qty &lt; 0 OR cd.qty = 0 AND cd.cumulatedqty &lt; 0 THEN cd.costadjustment * (-1)
            ELSE cd.costadjustment
        END +
        CASE
            WHEN cd.qty &lt; 0 OR cd.qty = 0 AND cd.cumulatedqty &lt; 0 THEN cd.costadjustmentll * (-1)
            ELSE cd.costadjustmentll
        END AS endingbalance,
       t.C_Project_ID,
       t.C_Activity_ID,
       t.C_Campaign_ID,
       t.C_Region_ID,
       t.C_BPartner_ID,
       t.User1_ID,
       t.User2_ID,
       t.User3_ID,
       t.User4_ID
   FROM M_Product p
   JOIN RV_Transaction t ON t.M_Product_ID = p.M_Product_ID
   LEFT JOIN M_CostDetail cd ON cd.M_Transaction_ID = t.M_Transaction_ID AND cd.M_Product_ID = p.M_Product_ID
   LEFT JOIN M_CostType ct ON ct.M_CostType_id = cd.M_CostType_ID
   LEFT JOIN M_CostElement ce ON ce.M_CostElement_ID = cd.M_CostElement_ID;</SQLStatement>
      <RollbackStatement>DROP VIEW RV_M_Transaction_Costing;
DROP VIEW RV_Transaction;   
CREATE OR REPLACE VIEW RV_TRANSACTION
AS
SELECT t.M_Transaction_ID, t.AD_Client_ID,t.AD_Org_ID,
    t.MovementType,t.MovementDate,t.MovementQty,
    -- Instance
    t.M_AttributeSetInstance_ID, asi.M_AttributeSet_ID, asi.SerNo, asi.Lot, asi.M_Lot_ID,asi.GuaranteeDate,
    -- Product
    t.M_Product_ID,p.Value,p.Name,p.Description,p.UPC,p.SKU,
    p.C_UOM_ID,p.M_Product_Category_ID,p.Classification, p.Weight,p.Volume,p.VersionNo,
    -- Locator
    t.M_Locator_ID, l.M_Warehouse_ID, l.X, l.Y, l.Z,
    -- Inventory
    t.M_InventoryLine_ID,il.M_Inventory_ID,
    -- Movement
    t.M_MovementLine_ID,ml.M_Movement_ID,
    -- In/Out
    t.M_InOutLine_ID,iol.M_InOut_ID,
    -- Production
    t.M_ProductionLine_ID,prdl.M_ProductionPlan_ID,prdl.M_Production_ID,
    -- ProjectIssue
    t.C_ProjectIssue_ID,
    t.PP_Cost_Collector_ID,
    COALESCE(il.Line,ml.Line,iol.Line,prdl.Line,pjl.Line) AS Line,
    COALESCE(i.movementdate, m.movementdate, io.dateacct, prd.movementdate, pjl.movementdate, cc.dateacct) AS dateacct,
    COALESCE(i.documentno, m.documentno, io.documentno, prd.name, pj.value, cc.documentno) AS documentno,
    COALESCE(i.c_doctype_id, m.c_doctype_id, io.c_doctype_id, 0, 0, cc.c_doctype_id) AS c_doctype_id,
    -- DIMENSION
    COALESCE(pjl.C_Project_ID, iol.C_Project_ID , i.C_Project_ID, m.C_Project_ID,cc.C_Project_ID) AS C_Project_ID,
    COALESCE(i.C_Activity_ID,iol.C_Activity_ID,m.C_Activity_ID, cc.C_Activity_ID) AS C_Activity_ID,
    COALESCE(i.C_Campaign_ID,iol.C_Campaign_ID, m.C_Campaign_ID) AS C_Campaign_ID,
    0 AS C_Region_ID,
    COALESCE(il.CreatedBy, io.C_BPartner_ID, m.C_BPartner_ID ) AS C_BPartner_ID,
    COALESCE(i.User1_ID, iol.User1_ID, m.User1_ID , cc.User1_ID) AS User1_ID,
    COALESCE(i.User2_ID, iol.User2_ID, m.User2_ID , cc.User2_ID) AS User2_ID
FROM M_Transaction t
  INNER JOIN M_Locator l ON (t.M_Locator_ID=l.M_Locator_ID)
  INNER JOIN M_Product p ON (t.M_Product_ID=p.M_Product_ID)
  LEFT OUTER JOIN M_AttributeSetInstance asi ON (t.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID)
  LEFT OUTER JOIN M_InventoryLine il ON (t.M_InventoryLine_ID=il.M_InventoryLine_ID)
  LEFT OUTER JOIN M_inventory i ON (il.m_inventory_id = i.m_inventory_id)
  LEFT OUTER JOIN M_MovementLine ml ON (t.M_MovementLine_ID=ml.M_MovementLine_ID)
  LEFT OUTER JOIN M_movement m ON (ml.m_movement_id = m.m_movement_id)
  LEFT OUTER JOIN M_InOutLine iol ON (t.M_InOutLine_ID=iol.M_InOutLine_ID)
  LEFT OUTER JOIN M_InOut io ON (iol.M_InOut_ID = io.M_InOut_ID)
  LEFT OUTER JOIN M_ProductionLine prdl ON (t.M_ProductionLine_ID=prdl.M_ProductionLine_ID)
  --LEFT OUTER JOIN M_ProductionPlan prdp ON (prdl.M_ProductionPlan_ID=prdp.M_ProductionPlan_ID)
  LEFT OUTER JOIN M_Production prd ON prdl.M_Production_ID = prd.M_Production_ID
  LEFT OUTER JOIN C_ProjectIssue pjl ON (t.C_ProjectIssue_ID=pjl.C_ProjectIssue_ID)
  LEFT OUTER JOIN C_Project pj ON pjl.C_Project_id = pj.C_Project_id
  LEFT OUTER JOIN PP_Cost_Collector cc ON t.PP_Cost_Collector_ID = cc.PP_Cost_Collector_ID;
  
CREATE OR REPLACE VIEW RV_M_Transaction_Costing AS
 SELECT
 t.M_Transaction_ID,
 t.AD_Client_ID,
 t.AD_Org_ID,
 t.MovementType,
 t.MovementDate,
 t.MovementQty,
 t.M_AttributeSetInstance_ID,
 t.M_AttributeSet_ID,
 t.SerNo,
 t.Lot,
 t.M_Lot_ID,
 t.GuaranteeDate,
 t.M_Product_ID,
 p.Value,
 p.Name,
 p.Description,
 p.UPC,
 p.SKU,
 p.C_UOM_ID,
 p.M_Product_Category_ID,
 p.Classification,
 p.Group1,
 p.Group2,
 p.Weight,
 p.Volume,
 p.VersionNo,
 t.DocumentNo,
 t.C_DocType_ID,
 t.M_Locator_ID,
 t.x,
 t.y,
 t.z,
 t.M_Warehouse_ID,
 t.M_InventoryLine_ID,
 t.M_Inventory_ID,
 t.M_Movementline_ID,
 t.M_Movement_ID,
 t.M_InOutline_ID,
 t.M_InOut_ID,
 t.M_ProductionLine_ID,
 t.M_ProductionPlan_ID,
 t.M_Production_ID,
 t.C_ProjectIssue_id,
 t.PP_Cost_Collector_ID,
 cd.C_LandedCostAllocation_ID,
 cd.C_AcctSchema_ID,
 cd.M_CostType_ID,
 cd.M_CostElement_iD,
 cd.SeqNo,
 cd.CostAdjustmentDate,
 cd.CostadjustmentDateLL,
 cd.DateAcct,
 cd.CumulatedQty AS BeginningQtyBalance,
 cd.CurrentcostPrice,
 cd.CurrentcostPriceLL,
 cd.IsReversal,
 cd.IsSOTrx,
 cd.M_CostDetail_ID,
 cd.CumulatedAmt + cd.CumulatedAmtLL AS BeginningBalance,
 cd.qty,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.amt * (-1)
            ELSE cd.amt
        END AS amt,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.amtll * (-1)
            ELSE cd.amtll
        END AS amtll,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.costamt * (-1)
            ELSE cd.costamt
        END AS costamt,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.costamtll * (-1)
            ELSE cd.costamtll
        END AS costamtll,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.costadjustment * (-1)
            ELSE cd.costadjustment
        END AS costadjustment,
        CASE
            WHEN cd.qty &lt; 0 THEN cd.costadjustmentll * (-1)
            ELSE cd.costadjustmentll
        END AS costadjustmentll, cd.cumulatedamt, cd.cumulatedamtll, cd.cumulatedqty + cd.qty AS endingqtybalance, cd.cumulatedamt + cd.cumulatedamtll +
        CASE
            WHEN cd.qty &lt; 0 OR cd.qty = 0 AND cd.cumulatedqty &lt; 0 THEN cd.costamt * (-1)
            ELSE cd.costamt
        END +
        CASE
            WHEN cd.qty &lt; 0 OR cd.qty = 0 AND cd.cumulatedqty &lt; 0 THEN cd.costamtll * (-1)
            ELSE cd.costamtll
        END +
        CASE
            WHEN cd.qty &lt; 0 OR cd.qty = 0 AND cd.cumulatedqty &lt; 0 THEN cd.costadjustment * (-1)
            ELSE cd.costadjustment
        END +
        CASE
            WHEN cd.qty &lt; 0 OR cd.qty = 0 AND cd.cumulatedqty &lt; 0 THEN cd.costadjustmentll * (-1)
            ELSE cd.costadjustmentll
        END AS endingbalance,
       t.C_Project_ID,
       t.C_Activity_ID,
       t.C_Campaign_ID,
       t.C_Region_ID,
       t.C_BPartner_ID,
       t.User1_ID,
       t.User2_ID
   FROM M_Product p
   JOIN RV_Transaction t ON t.M_Product_ID = p.M_Product_ID
   LEFT JOIN M_CostDetail cd ON cd.M_Transaction_ID = t.M_Transaction_ID AND cd.M_Product_ID = p.M_Product_ID
   LEFT JOIN M_CostType ct ON ct.M_CostType_id = cd.M_CostType_ID
   LEFT JOIN M_CostElement ce ON ce.M_CostElement_ID = cd.M_CostElement_ID;  </RollbackStatement>
    </Step>
  </Migration>
</Migrations>
