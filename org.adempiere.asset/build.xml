<project name="FixedAssetManagement" default="dist" basedir="."
  xmlns:if="ant:if"
  xmlns:unless="ant:unless">
  
    <description>
        Building FixedAsset.jar
        by
        Victor Perez 
        http://www.e-evolution.com
    </description>
  <!-- set global properties for this build -->
  <property file="build.properties"/>
  <import file="${adempiere.source}/utils_dev/properties.xml"/>	
  <property name="src" location="src/main/java/base"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  
  <property name="test.src" value="src/test/java/base"/>
  <property name="test.build.dir" value="test/build"/>
  <property name="test.results.dir" value="test/test_results"/>
  <property name="base.test.build.dir" value="../base/test/build"/>
  <property name="base.build.dir" value="../base/build"/>

  <path id="lib.class.path">
     <fileset dir="${adempiere.source}/lib">
        <include name="*.jar"/>
     </fileset>
      <pathelement path="${adempiere.source}/base/Base.jar"/>
      <fileset dir="${adempiere.source}/packages">
       <include name="*.jar"/>
    </fileset>
  </path>

  <target name="init" depends="clean">
    <echo message="source location: ${adempiere.source}"/>
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac encoding="UTF-8" srcdir="${src}" destdir="${build}" includeantruntime="false">
      <classpath refid="lib.class.path"/>
    </javac>

  </target>

  <target name="dist" depends="compile,integration-tests"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/lib/FixedAssetManagement.jar" basedir="${build}"/>

    <!-- Create target Libero deployment -->
    <mkdir dir="${env.ADEMPIERE_HOME}/packages/FixedAsset/lib"/>

    <!-- Transfer FixedAsset.jar -->
    <copy file="${dist}/lib/FixedAssetManagement.jar" todir="${env.ADEMPIERE_HOME}/packages/FixedAssetManagement/lib"/>
    <copy file="${dist}/lib/FixedAssetManagement.jar" todir="${adempiere.source}/packages/"/>
  	<copy file="../tools/lib/legacy/fixed-asset-support-legacy-1.0.0.jar" todir="${env.ADEMPIERE_HOME}/packages/FixedAssetManagement/lib" />
  	<copy file="../tools/lib/legacy/fixed-asset-support-legacy-1.0.0.jar" todir="../packages/" />

  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${env.ADEMPIERE_HOME}/packages/FixedAsset/lib"/>
    <delete file="${adempiere.source}/packages/FixedAssetManagement.jar"/>
  </target>
  
  <!-- =========================================== -->
  <!-- Tests                                       -->
  <!-- =========================================== -->

  <path id="test.class.path">
    <fileset dir="${adempiere.source}/lib">
       <include name="*.jar"/>
    </fileset>
     <pathelement path="${adempiere.source}/base/Base.jar"/>
     <fileset dir="${adempiere.source}/packages">
      <include name="*.jar"/>
   </fileset>
    <pathelement path="${build}"/>
    <pathelement location="${test.build.dir}"/>
    <pathelement location="${base.test.build.dir}"/>
    <fileset dir="../tools/lib/junit" includes="**/*.jar"/>
    <fileset dir="../tools/lib/testing" includes="**/*.jar"/>
  </path>
    
  <target name="check.tests">
    <condition property="unitTests.run">
        <and>
            <istrue value="${test.performTests}"/>
            <istrue value="${test.performUnitTests}"/>
        </and>
    </condition>
    <condition property="integrationTests.run">
        <and>
            <istrue value="${test.performTests}"/>
            <istrue value="${test.performIntegrationTests}"/>
        </and>
    </condition>
  </target>
    
  <target name="alertIfTestSkipped" depends="check.tests" unless="${test.performTests}">
    <echo message="Tests will not be performed. See adempiere/utils_dev/test.properties."/>     
  </target>
    
  <target name="clean.tests" depends="alertIfTestSkipped" if="${test.performTests}">
    <delete dir="${test.build.dir}"/>
    <delete dir="${test.results.dir}"/>
  </target>

  <target name="compile.test" depends="compile, clean.tests"
        if="${test.performTests}">
    <mkdir dir="${test.build.dir}"/>
    <javac target="11" encoding="UTF-8" fork="true" includeantruntime="false"
        destdir="${test.build.dir}" deprecation="on" debug="on" 
        memoryinitialsize="512m" memorymaximumsize="512m">
      <src path="${test.src}"/>
      <classpath refid="test.class.path"/>
    </javac>        
  </target>
    
  <target name="alertIfUnitTestSkipped" depends="check.tests" unless="unitTests.run">
    <echo if:true="${test.performTests}">
"===> Unit tests will not be performed. See adempiere/utils_dev/test.properties."</echo>
  </target>

  <target name="alertIfIntegrationTestSkipped" depends="check.tests" 
        unless="integrationTests.run">
    <echo if:true="${test.performTests}">
"===> Integration tests will not be performed. See adempiere/utils_dev/test.properties."</echo> 
  </target>
    
  <target name="unit-tests" depends="compile.test, alertIfUnitTestSkipped" if="unitTests.run">
    <mkdir dir="../org.adempiere.asset/${test.results.dir}"/>       
    <junitlauncher 
        printsummary="false" 
        haltonfailure="yes" 
        failureproperty="test.failed"
        excludeTags="IntegrationTest">
      <classpath refid="test.class.path"/>
      <testclasses outputdir="${adempiere.base}/org.adempiere.asset/${test.results.dir}">
        <fileset dir="${test.build.dir}"/>
        <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
        <listener classname="org.adempiere.test.AdempiereTestExecutionListener"
            sendSysErr="true" sendSysOut="true"/>
        <fork/>
      </testclasses>
    </junitlauncher>
  </target>

    
  <target name="integration-tests" depends="unit-tests, alertIfIntegrationTestSkipped" 
        if="integrationTests.run">
    <mkdir dir="../org.adempiere.asset/${test.results.dir}"/>       
    <junitlauncher 
        printsummary="false" 
        haltonfailure="yes" 
        failureproperty="test.failed"
        excludeTags="UnitTest">
      <classpath refid="test.class.path"/>
      <testclasses outputdir="${adempiere.base}/org.adempiere.asset/${test.results.dir}">
        <fileset dir="${test.build.dir}"/>
        <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
        <listener classname="org.adempiere.test.AdempiereTestExecutionListener"
            sendSysErr="true" sendSysOut="true"/>
        <fork/>
      </testclasses>            
    </junitlauncher>
  </target>

</project>
