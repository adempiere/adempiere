/******************************************************************************
 * Product: Adempiere ERP & CRM Smart Business Solution                       *
 * Copyright (C) 1999-2006 ComPiere, Inc. All Rights Reserved.                *
 * This program is free software; you can redistribute it and/or modify it    *
 * under the terms version 2 of the GNU General Public License as published   *
 * by the Free Software Foundation. This program is distributed in the hope   *
 * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied *
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.           *
 * See the GNU General Public License for more details.                       *
 * You should have received a copy of the GNU General Public License along    *
 * with this program; if not, write to the Free Software Foundation, Inc.,    *
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.                     *
 * For the text or an alternative of this public license, you may reach us    *
 * ComPiere, Inc., 2620 Augustine Dr. #245, Santa Clara, CA 95054, USA        *
 * or via info@compiere.org or http://www.compiere.org/license.html           *
 *****************************************************************************/
package org.compiere.grid.ed;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.logging.Level;

import javax.swing.ImageIcon;
import javax.swing.JPopupMenu;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

import org.adempiere.controller.AttributeDialogController;
import org.adempiere.controller.AttributeDialogControllerImpl;
import org.adempiere.controller.form.AttributeDialog;
import org.adempiere.controller.form.AttributeDialogInfo;
import org.adempiere.controller.form.AttributeInstanceSearchDialog;
import org.compiere.apps.ADialog;
import org.compiere.apps.AEnv;
import org.compiere.apps.ALayout;
import org.compiere.apps.ALayoutConstraint;
import org.compiere.apps.AWindow;
import org.compiere.apps.ConfirmPanel;
import org.compiere.apps.search.PAttributeInstance;
import org.compiere.model.MAttributeValue;
import org.compiere.model.MQuery;
import org.compiere.model.MWindow;
import org.compiere.swing.CButton;
import org.compiere.swing.ICheckBox;
import org.compiere.swing.CCheckBox;
import org.compiere.swing.IComboBox;
import org.compiere.swing.CComboBox;
import org.compiere.swing.IDate;
import org.compiere.swing.CDialog;
import org.compiere.swing.CEditor;
import org.compiere.swing.ILabel;
import org.compiere.swing.CLabel;
import org.compiere.swing.CMenuItem;
import org.compiere.swing.CPanel;
import org.compiere.swing.CScrollPane;
import org.compiere.swing.ITextField;
import org.compiere.swing.CTextField;
import org.compiere.util.CLogger;
import org.compiere.util.DisplayType;
import org.compiere.util.Env;
import org.compiere.util.KeyNamePair;
import org.compiere.util.Msg;

/**
 * Product Attribute Set Product/Instance Dialog Editor. Called from
 * VPAttribute.actionPerformed
 *
 * @author Jorg Janke
 * @version $Id: VPAttributeDialog.java,v 1.4 2006/07/30 00:51:27 jjanke Exp $
 * 
 * @author Michael McKay (mjmckay)
 *         <li>BF3468823 - Attribute Set Instance editor does not display
 *         <li>ADEMPIERE-72 VLookup and Info Window improvements
 *         https://adempiere.atlassian.net/browse/ADEMPIERE-72
 *         <li>#281 Improve tests of validity of ASI values
 *         <li>#258 Reduce duplication of ASI values
 */
public class VPAttributeDialog extends CDialog
<<<<<<< Updated upstream
        implements ActionListener, AttributeDialog {
=======
        implements ActionListener, PAttributeDialog {

    private static final String GUARANTEE_DATE_COLUMNNAME = "GuaranteeDate";

    private static final String SER_NO_COLUMNNAME = "SerNo";

    private static final String M_ATTRIBUTE_SET_INSTANCE_ID =
            "M_AttributeSetInstance_ID";
>>>>>>> Stashed changes
    
    private static final long serialVersionUID = -1062346984681892620L;

    private CLogger log = CLogger.getCLogger(getClass());

    /**************************************************************************
     * Mouse Listener for Popup Menu
     */
    final class VPAttributeDialogMouseAdapter
            extends java.awt.event.MouseAdapter {

        VPAttributeDialogMouseAdapter(VPAttributeDialog dialogAdaptee) {

            adaptee = dialogAdaptee;

        } // VPAttributeDialog_mouseAdapter

        private VPAttributeDialog adaptee;

        @Override
        public void mouseClicked(MouseEvent e) {

            if (isOpenPopupMenu(e))
                openPopupMenu(e);

        }

        public void openPopupMenu(MouseEvent e) {

            adaptee.popupMenu.show((Component) e.getSource(), e.getX(),
                    e.getY());

        }

        public boolean isOpenPopupMenu(MouseEvent e) {

            return SwingUtilities.isRightMouseButton(e);

        }

    }

    /**
     * Product Attribute Instance Dialog
     * 
     * @param frame         parent frame
     * @param asiId         Product Attribute Set Instance id
     * @param productId     Product id
     * @param bpartnerId    b partner
     * @param productWindow this is the product window (define Product Instance)
     * @param columnId      column
     * @param myWindowNo      window
     */
    public VPAttributeDialog(Frame frame, AttributeDialogInfo info) {

        super(frame, info.getTitle(), true);
        log.config(info.toString());
        myWindowNo = Env.createWindowNo(this);
        info.setDialogWindowNo(myWindowNo);
        controller = new AttributeDialogControllerImpl(this, info);
        
        try {
            jbInit();
        } catch (Exception ex) {
            log.log(Level.SEVERE, "VPAttributeDialog" + ex);
        }
        
        if (!controller.init()) {
            dispose();
            return;
        }
        AEnv.showCenterWindow(frame, this);

    }

    private AttributeDialogController controller;
    private int myWindowNo;
<<<<<<< Updated upstream
=======
    private boolean changed = false;

    private CLogger log = CLogger.getCLogger(getClass());
>>>>>>> Stashed changes
    private int rowCounter = 0;
    private VString fieldLotString;
    private CComboBox fieldLot = null;
    private CButton bLot;
    JPopupMenu popupMenu = new JPopupMenu();
    private CMenuItem mZoom;
<<<<<<< Updated upstream
    private VString fieldSerNo;
    private CButton bSerNo;
    private VDate fieldGuaranteeDate;
    private CTextField fieldDescription;
    
=======
    // Ser No
    private VString fieldSerNo =
            new VString(SER_NO_COLUMNNAME, false, false, true, 20, 20, null, null);
    private CButton bSerNo =
            new CButton(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "New")));
    // Date
    private VDate fieldGuaranteeDate =
            new VDate(GUARANTEE_DATE_COLUMNNAME, false, false, true, DisplayType.Date,
                    Msg.translate(Env.getCtx(), GUARANTEE_DATE_COLUMNNAME));
    //
    private CTextField fieldDescription = new CTextField(20);
    //
>>>>>>> Stashed changes
    private BorderLayout mainLayout = new BorderLayout();
    private CPanel centerPanel = new CPanel();
    private transient ALayout centerLayout = new ALayout(5, 5, true);
    private ConfirmPanel confirmPanel = new ConfirmPanel(true);
    private CScrollPane centerScroll = new CScrollPane();
<<<<<<< Updated upstream
    private PAttributeInstance asiSearchAndSelectDialog = null;


=======

    private PAttributeInstance asiSearchAndSelectDialog;


    /**
     * Layout
     * 
     */
>>>>>>> Stashed changes
    private void jbInit() {

        getContentPane().setLayout(mainLayout);
        centerScroll.getViewport().add(centerPanel);
<<<<<<< Updated upstream
        add(centerScroll, BorderLayout.CENTER);
        getContentPane().add(confirmPanel, BorderLayout.SOUTH);
        centerPanel.setLayout(centerLayout);
        confirmPanel.addActionListener(this);

    }

=======
        this.add(centerScroll, BorderLayout.CENTER);
        this.getContentPane().add(confirmPanel, BorderLayout.SOUTH);
        centerPanel.setLayout(centerLayout);
        confirmPanel.addActionListener(this);

    }

    /**
     * Dyanmic Init.
     * 
     * @return true if initialized
     */
    private boolean initAttributes() {

        if (!controller.initAttributes())
            return false;
        
        // Clear the current ones, if any.
        centerPanel.removeAll();
        rowCounter = 0;

        cbNewEdit = new CCheckBox();
        bSelect = new CButton(Env.getImageIcon("PAttribute16.gif"));
        bSerNo = new CButton(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "New")));
        bLot = new CButton(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "New")));

        // Only add buttons and controls if readWrite
        if (controller.isOKToAddButtonsAndControls()) {
            // New/Edit - Selection
            if (controller.isEnableNewRecord()) {
                cbNewEdit.setText(Msg.getMsg(Env.getCtx(), "NewRecord"));
            } else
                cbNewEdit.setText(Msg.getMsg(Env.getCtx(), "EditRecord"));
            cbNewEdit.addActionListener(this);
            centerPanel.add(cbNewEdit, new ALayoutConstraint(rowCounter++, 0));

            if (controller.isEnableSelectFromExisting()) {
                bSelect.setText(Msg.getMsg(Env.getCtx(), "SelectExisting"));
                bSelect.addActionListener(this);
                centerPanel.add(bSelect, null);
            }
        }

        if (controller.isShowInstanceAttributes()) 
        {
            initInstanceAttributes(controller.isEnableNewRecord());
        }

        // Product attributes can be shown in any window but are read/write
        // in the Product window only.
        MAttribute[] attributes = controller.getProductAttributes();
        
        if (attributes.length > 0) {
            CLabel group = new CLabel(controller.getProductAttributeGroupLabel());
            group.setFontBold(true);
            group.setHorizontalAlignment(SwingConstants.CENTER);
            centerPanel.add(group, new ALayoutConstraint(rowCounter++, 0));
        }
        for (int i = 0; i < attributes.length; i++)
            addAttributeLine(attributes[i], true,
                    !controller.isProductAttributesReadWrite());


        if (rowCounter == 0) {
            ADialog.error(myWindowNo, this, "PAttributeNoInfo");
        }

        // New/Edit Window
        if (controller.addNewEditButtonForProductAttributes()) {
            cbNewEdit.setSelected(controller.isNewEditSelectedForProductAttributes());
            confirmPanel.getCancelButton().setEnabled(cbNewEdit.isSelected());
            cmd_newEdit();
        } else {
            confirmPanel.getCancelButton().setEnabled(false);
        }

        // Attribute Set Instance Description
        CLabel label = new CLabel(Msg.translate(Env.getCtx(), "Description"));
        label.setLabelFor(fieldDescription);
        fieldDescription.setText(controller.getInstanceDescription());
        fieldDescription.setEditable(false);
        centerPanel.add(label, new ALayoutConstraint(rowCounter++, 0));
        centerPanel.add(fieldDescription, null);

        // Window usually to wide (??)
        Dimension dd = centerPanel.getPreferredSize();
        dd.width = Math.min(500, dd.width);
        centerPanel.setPreferredSize(dd);
        return true;

    }

    void initInstanceAttributes(Boolean isNew) {

        addInstanceGroupLabel();
        addInstanceAttributes(isNew);
        addLot(isNew);
        addSerNo(isNew);
        addGuaranteeDate(isNew);

    }

    void addGuaranteeDate(Boolean isNew) {

        if (controller.isGuaranteeDate()) {
            CLabel label = new CLabel(
                    Msg.translate(Env.getCtx(), GUARANTEE_DATE_COLUMNNAME));
            label.setLabelFor(fieldGuaranteeDate);
            fieldGuaranteeDate.setReadWrite(readWrite && !isNew);
            fieldGuaranteeDate.setMandatory(
                    controller.isGuaranteeDateMandatory() && readWrite);
            if (controller.isNewGuaranteeDate())
                fieldGuaranteeDate
                        .setValue(controller.getNewGuaranteeDate());
            else
                fieldGuaranteeDate
                        .setValue(controller.getGuaranteeDate());
            fieldGuaranteeDate.addActionListener(this);
            centerPanel.add(label, new ALayoutConstraint(rowCounter++, 0));
            centerPanel.add(fieldGuaranteeDate, null);
            manuallyEnterGuaranteeDate();
        } // GuaranteeDate

    }

    void addSerNo(Boolean isNew) {

        if (controller.isSerNo()) {
            CLabel label =
                    new CLabel(Msg.translate(Env.getCtx(), SER_NO_COLUMNNAME));
            label.setLabelFor(fieldSerNo);
            fieldSerNo.setText(controller.getSerNo());
            fieldSerNo.setReadWrite(readWrite && !isNew);
            fieldSerNo.setMandatory(controller.isSerNoMandatory() && readWrite);
            fieldSerNo.addActionListener(this);
            centerPanel.add(label, new ALayoutConstraint(rowCounter++, 0));
            centerPanel.add(fieldSerNo, null);
            // New SerNo Button
            if (controller.isEnableNewSerNoButton()) {
                    centerPanel.add(bSerNo, null);
                    bSerNo.addActionListener(this);
            }
            manuallyEnterSerialNo();
        } 

    }

    void addLot(Boolean isNew) {

        if (controller.isLot()) {
            addFieldLotStringEditor(isNew);            
            addFieldLotEditor(isNew);
            addLotButton();
        }

    }

    void addFieldLotStringEditor(Boolean isNew) {

        CLabel label =
                new CLabel(Msg.translate(Env.getCtx(), "Lot"));
        label.setLabelFor(fieldLotString);
        fieldLotString.setReadWrite(readWrite && !isNew);
        fieldLotString
                .setMandatory(controller.isLotMandatory());
        fieldLotString.setText(controller.getInstanceLot());
        fieldLotString.addActionListener(this);
        if (fieldLotString.isMandatory()) {
            fieldLotString
                    .setBackground(fieldLotString.getText() == null
                            || fieldLotString.getText().isEmpty());
        }
        centerPanel.add(label, new ALayoutConstraint(rowCounter++, 0));
        centerPanel.add(fieldLotString, null);

    }

    void addFieldLotEditor(Boolean isNew) {

        CLabel label;
        fieldLot = new CComboBox(controller.getLotKeyNamePairs());
        label = new CLabel(Msg.translate(Env.getCtx(), "M_Lot_ID"));
        label.setLabelFor(fieldLot);
        fieldLot.setReadWrite(readWrite && !isNew);
        fieldLot.addActionListener(this);
        if (fieldLotString.isMandatory()) {
            fieldLot.setBackground(fieldLot.getDisplay() == null
                    || fieldLot.getDisplay().isEmpty());
        }
        addZoomToFieldLotContextMenu();
        setFieldLotValue();
        centerPanel.add(label, new ALayoutConstraint(rowCounter++, 0));
        centerPanel.add(fieldLot, null);

    }

    void addLotButton() {

        if(controller.isEnableNewLotButton()) {
                centerPanel.add(bLot, null);
                bLot.addActionListener(this);
        }

    }

    void setFieldLotValue() {

        int selectedKey = controller.getInstanceLotId();
        if (selectedKey != 0) {
            for (int i = 1; i < fieldLot.getItemCount(); i++) {
                KeyNamePair pp =
                        (KeyNamePair) fieldLot.getItemAt(i);
                if (pp.getKey() == selectedKey) {
                    fieldLot.setSelectedIndex(i);
                    fieldLotString.setEditable(false);
                    break;
                }
            }
        }

    }

    void addZoomToFieldLotContextMenu() {

        fieldLot.addMouseListener(
                new VPAttributeDialogMouseAdapter(this)); // popup
        mZoom = new CMenuItem(Msg.getMsg(Env.getCtx(), "Zoom"),
                Env.getImageIcon("Zoom16.gif"));
        mZoom.addActionListener(this);
        popupMenu.add(mZoom);

    }

    void addInstanceAttributes(Boolean isNew) {

        MAttribute[] attributes = controller.getInstanceAttributes();
        log.fine("Instance Attributes=" + attributes.length);
        for (int i = 0; i < attributes.length; i++)
            addAttributeLine(attributes[i], false, !readWrite && isNew); // Instance
                                                                         // only,
                                                                         // read/write

    }

    void addInstanceGroupLabel() {

        if (controller.isAttributeSetAnInstance()) {
            CLabel group = new CLabel(
                    Msg.translate(Env.getCtx(), "IsInstanceAttribute"));
            group.setFontBold(true);
            group.setHorizontalAlignment(SwingConstants.CENTER);
            centerPanel.add(group, new ALayoutConstraint(rowCounter++, 0));
        }

    }


    /**
     * Add Attribute Line
     * 
     * @param attribute attribute
     * @param product   product level attribute
     * @param readOnly  value is read only
     */
    private void addAttributeLine(MAttribute attribute, boolean product,
            boolean readOnly) {

        log.fine(attribute + ", Product=" + product + ", R/O=" + readOnly);
        CLabel label = createAttributeLabel(attribute, product);
        createAttributeEditor(attribute, product, readOnly, label);

    }

    void createAttributeEditor(MAttribute attribute, boolean product,
            boolean readOnly, CLabel label) {

        MAttributeInstance instance = controller.getAttributeInstance(attribute);

        if (X_M_Attribute.ATTRIBUTEVALUETYPE_List
                .equals(attribute.getAttributeValueType())) {
            
            addAttributeListEditor(attribute, product, readOnly, label,
                    instance);
        } else if (X_M_Attribute.ATTRIBUTEVALUETYPE_Number
                .equals(attribute.getAttributeValueType())) {
            addAttributeNumberEditor(attribute, product, readOnly, label,
                    instance);
        } else // Text Field
        {
            addAttributeTextEditor(attribute, product, readOnly, label,
                    instance);
        }

    }

    void addAttributeTextEditor(MAttribute attribute, boolean product,
            boolean readOnly, CLabel label, MAttributeInstance instance) {

        VString editor =
                new VString(attribute.getName(), attribute.isMandatory(),
                        false, true, 20, INSTANCE_VALUE_LENGTH, null, null);
        editor.setMandatory(attribute.isMandatory());
        if (instance != null)
            editor.setValue(instance.getValue());
        label.setLabelFor(editor);
        centerPanel.add(editor, null);
        if (readOnly) {
            editor.setReadWrite(false);
            editor.setEditable(false);
        }
        editorList.add(new MEditor(editor, product));

    }

    void addAttributeNumberEditor(MAttribute attribute, boolean product,
            boolean readOnly, CLabel label, MAttributeInstance instance) {

        VNumber editor =
                new VNumber(attribute.getName(), attribute.isMandatory(),
                        readOnly, !readOnly, DisplayType.Number,
                        attribute.getName());
        editor.setMandatory(attribute.isMandatory());
        if (instance != null)
            editor.setValue(instance.getValueNumber());
        else
            editor.setValue(Env.ZERO);
        label.setLabelFor(editor);
        centerPanel.add(editor, null);
        if (readOnly) {
            editor.setReadWrite(false);
        }
        editorList.add(new MEditor(editor, product));

    }

    CLabel createAttributeLabel(MAttribute attribute, boolean product) {

        CLabel label = new CLabel(attribute.getName());
        if (product)
            label.setFont(new Font(label.getFont().getFontName(), Font.BOLD,
                    label.getFont().getSize()));
        if (attribute.getDescription() != null)
            label.setToolTipText(attribute.getDescription());
        centerPanel.add(label, new ALayoutConstraint(rowCounter++, 0));
        return label;

    }

    void addAttributeListEditor(MAttribute attribute, boolean product,
            boolean readOnly, CLabel label, MAttributeInstance instance) {

        MAttributeValue[] values = attribute.getMAttributeValues(); // optional
                                                                    // =
                                                                    // null
        CComboBox editor = new CComboBox(values);
        editor.setMandatory(attribute.isMandatory());
        selectInstanceFromValues(attribute, instance, values, editor);
        label.setLabelFor(editor);
        centerPanel.add(editor, null);
        if (readOnly) {
            editor.setReadWrite(false);
            editor.setEditable(false);
        }
        editorList.add(new MEditor(editor, product));

    }

    void selectInstanceFromValues(MAttribute attribute,
            MAttributeInstance instance, MAttributeValue[] values,
            CComboBox editor) {

        boolean found = false;
        final String attributeLabel = "Attribute=";
        if (instance != null) {
            for (int i = 0; i < values.length; i++) {
                if (values[i] != null && values[i].getM_AttributeValue_ID()
                        == instance.getM_AttributeValue_ID()) {
                    editor.setSelectedIndex(i);
                    found = true;
                    break;
                }
            }
            if (found)
                log.fine(attributeLabel + attribute.getName() + " #"
                        + values.length + " - found: " + instance);
            else
                log.warning(attributeLabel + attribute.getName() + " #"
                        + values.length + " - NOT found: " + instance);
        } // setComboBox
        else
            log.fine(attributeLabel + attribute.getName() + " #"
                    + values.length + " no instance");

    } 

    /**
     * dispose
     */
>>>>>>> Stashed changes
    @Override
    public void dispose() {

        removeAll();
<<<<<<< Updated upstream
=======
        controller.dispose();
>>>>>>> Stashed changes
        super.dispose();

    }


<<<<<<< Updated upstream
    public void actionPerformed(ActionEvent e) {

        if (e.getActionCommand().equals(ConfirmPanel.A_OK))
            controller.actionOK();
=======
        if (e.getSource() == bSelect) {
            selectInstance();
        }
        else if (e.getSource() == cbNewEdit) {
            cmd_newEdit();
        }
        else if (e.getSource() == fieldLot) {
            selectLotFromExisting();
        }
        else if (e.getSource() == fieldLotString) {
            manuallyEnterLot();
        }
        else if (e.getSource() == bLot) {
            createNewLot();
        }
        else if (e.getSource() == fieldSerNo) {
            manuallyEnterSerialNo();
        }
        else if (e.getSource() == bSerNo) {
            createNewSerialNo();
        }
        else if (e.getSource() instanceof CTextField
                && ((CTextField) e.getSource()).getParent()
                        == fieldGuaranteeDate) {
            manuallyEnterGuaranteeDate();
        }

        else if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {
            if (saveSelection())
                dispose();
        }
>>>>>>> Stashed changes
        else if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {
            controller.actionCancel();
        }
<<<<<<< Updated upstream
        else if (e.getSource() == mZoom)
=======
        else if (e.getSource() == mZoom) {
>>>>>>> Stashed changes
            cmd_zoom();
        else
            controller.action(e.getSource());

<<<<<<< Updated upstream

    }

=======
    }

    void manuallyEnterGuaranteeDate() {

        if (fieldGuaranteeDate.isMandatory()) {
            fieldGuaranteeDate
                    .setBackground(fieldGuaranteeDate.getValue() == null);
        }

    }

    void createNewSerialNo() {

        fieldSerNo.setText(controller.getNewSerialNumber());
        manuallyEnterSerialNo();

    }

    void manuallyEnterSerialNo() {

        if (fieldSerNo.isMandatory()) {
            fieldSerNo.setBackground(fieldSerNo.getText() == null
                    || fieldSerNo.getText().isEmpty());
        }

    }

    void createNewLot() {

        KeyNamePair pp = controller.createNewLot();
        if (pp != null) {
            fieldLot.addItem(pp);
            fieldLot.setSelectedItem(pp);
            fieldLotString.setText(controller.getLot());
            fieldLotString.setEditable(false);
        }

    }

    void manuallyEnterLot() {

        if (fieldLotString.isMandatory()) {
            fieldLotString.setBackground(fieldLotString.getText() == null
                    || fieldLotString.getText().isEmpty());
        }

    }

    void selectInstance() {

        if (cmd_select()) {
            initAttributes();
            centerPanel.validate();
        }

    }

    void selectLotFromExisting() {

        KeyNamePair pp = (KeyNamePair) fieldLot.getSelectedItem();
        if (pp != null && pp.getKey() != -1) {
            fieldLotString.setText(pp.getName());
            fieldLotString.setEditable(false);
            controller.setLotId(pp.getKey());
        } else {
            fieldLotString.setEditable(true);
            controller.setLotId(0);
        }
        manuallyEnterLot();

    }

    /**
     * Instance Selection Button
     * 
     * @return true if selected
     */
    private boolean cmd_select() {

        log.config("");        
        controller.actionSelect();
        return changed;

    }
>>>>>>> Stashed changes

    public void openAttributeSetInstanceSearchAndSelectDialog(String title,
            int productId, int warehouseId, int locatorId, int bpartnerId) {

        asiSearchAndSelectDialog = new PAttributeInstance(this, title,
                warehouseId, locatorId, productId, bpartnerId);

    }

<<<<<<< Updated upstream
=======
    /**
     * Instance New/Edit
     */
    private void cmd_newEdit() {

        boolean rw = cbNewEdit.isSelected();
        fieldLotString.setEditable(controller.isLotStringEditable(rw));
                rw && (instanceASI == null || instanceASI.getM_Lot_ID() == 0));
        if (fieldLot != null)
            fieldLot.setReadWrite(rw);
        bLot.setReadWrite(rw);
        fieldSerNo.setReadWrite(rw);
        bSerNo.setReadWrite(rw);
        fieldGuaranteeDate.setReadWrite(rw);
        //
        for (int i = 0; i < editorList.size(); i++) {
            CEditor editor = editorList.get(i).editor;
            boolean productAttribute = editorList.get(i).isProductAttribute;
            if ((!productAttribute && !isProductWindow)
                    || (productAttribute && isProductWindow))
                editor.setReadWrite(rw);
            else
                editor.setReadWrite(false);
        }
        //
        if (rw) {
            confirmPanel.getCancelButton().setEnabled(rw);
        }

        // Don't edit the current ASI. Force creation of a new one.
        // This prevents changes to existing serial numbers. If the values match
        // an existing ASI, that ASI ID will be used.
        instanceASI.setM_AttributeSetInstance_ID(0);

    } // cmd_newEdit
>>>>>>> Stashed changes

    /**
     * Zoom M_Lot
     */
    @SuppressWarnings("deprecation")
    private void cmd_zoom() {

        int lotId = 0;
        KeyNamePair pp = (KeyNamePair) fieldLot.getSelectedItem();
        if (pp != null)
            lotId = pp.getKey();
        MQuery zoomQuery = new MQuery("M_Lot");
        zoomQuery.addRestriction("M_Lot_ID", MQuery.EQUAL, lotId);
        log.info(zoomQuery.toString());
        
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        int windowId = MWindow.getWindow_ID("Lot"); // Lot
        AWindow frame = new AWindow();
        if (frame.initWindow(windowId, zoomQuery)) {
            this.setVisible(false);
            this.setModal(false); // otherwise blocked
            this.setVisible(true);
            AEnv.addToWindowManager(frame);
            AEnv.showScreen(frame, SwingConstants.EAST);
        }
        setCursor(Cursor.getDefaultCursor());

    }

<<<<<<< Updated upstream
=======
    /**
     * Save Selection
     * 
     * @return true if saved
     */
    private boolean saveSelection() {

        if (!readWrite)
            return true;

        log.fine("");
        MAttributeSet as = instanceASI.getMAttributeSet();
        if (as == null)
            return true;

        changed = false;
        String mandatory = "";

        if (!isProductWindow && !as.excludeEntry(
                MColumn.getTable_ID(Env.getCtx(), columnId, null), isSOTrx)) {
//			if (hasProductASI && !as.isInstanceAttribute()){
//				// use the current product ASI - no changes
//				return true;
//			}
            if (as.isLot() && !as.isExcludeLot(columnId, isSOTrx)) {
                log.fine("Lot=" + fieldLotString.getText());
                String text = fieldLotString.getText();
                instanceASI.setLot(text);
                if (as.isLotMandatory() && (text == null || text.length() == 0))
                    mandatory += " - " + Msg.translate(Env.getCtx(), "Lot");
            } // Lot
            if (as.isSerNo() && !as.isExcludeSerNo(columnId, isSOTrx)) {
                log.fine("SerNo=" + fieldSerNo.getText());
                String text = fieldSerNo.getText();
                instanceASI.setSerNo(text);
                if (as.isSerNoMandatory()
                        && (text == null || text.length() == 0))
                    mandatory += " - " + Msg.translate(Env.getCtx(), SER_NO_COLUMNNAME);
            } // SerNo
            if (as.isGuaranteeDate()) {
                log.fine("GuaranteeDate=" + fieldGuaranteeDate.getValue());
                Timestamp ts = (Timestamp) fieldGuaranteeDate.getValue();
                instanceASI.setGuaranteeDate(ts);
                if (as.isGuaranteeDateMandatory() && ts == null)
                    mandatory += " - "
                            + Msg.translate(Env.getCtx(), GUARANTEE_DATE_COLUMNNAME);
            } // GuaranteeDate
        } else if (isProductWindow) {
            // To correct errors, remove all instance values
            instanceASI.setLot(null);
            instanceASI.setSerNo(null);
            instanceASI.setGuaranteeDate(null);
        }
>>>>>>> Stashed changes

    public boolean isChanged() {

        return controller.isChanged();

    }

    public Object getController() {

        return controller;

    }

    @Override
    public AttributeInstanceSearchDialog getAttributeInstanceSearchDialog() {

        return asiSearchAndSelectDialog;

    }

    @Override
    public void clearPanel() {

        centerPanel.removeAll();
        rowCounter = 0;

    }

    @Override
    public ICheckBox createNewEditCheckBox() {

        CCheckBox cbNewEdit = new CCheckBox();
        cbNewEdit.addActionListener(this);
        centerPanel.add(cbNewEdit, new ALayoutConstraint(rowCounter++, 0));
        return cbNewEdit;

    }

    @Override
    public CButton createButtonSelect(String imagePath) {

        ImageIcon imageIcon = Env.getImageIcon(imagePath);
        CButton bSelect = new CButton(imageIcon);
        bSelect.addActionListener(this);
        centerPanel.add(bSelect, null);

        return bSelect;

    }

    @Override
    public CButton createButtonSerialNumber(String name) {

        bSerNo = new CButton(name);
        return bSerNo;


    }

    @Override
    public CButton createButtonLot(String name) {

        bLot = new CButton(name);
        return bLot;

    }

    @Override
    public CLabel createAttributeGroupLable(String label) {

        CLabel group = new CLabel(label);
        group.setFontBold(true);
        group.setHorizontalAlignment(SwingConstants.CENTER);
        centerPanel.add(group, new ALayoutConstraint(rowCounter++, 0));
        return group;

    }

    @Override
    public void enableCancel(boolean enable) {

        confirmPanel.getCancelButton().setEnabled(enable);

    }

   @Override
    public ITextField getFieldLotString() {

        return fieldLotString;

    }

    @Override
    public IComboBox getFieldLot() {

        return fieldLot;

    }

    @Override
    public CEditor getFieldGuaranteeDate() {

        return fieldGuaranteeDate;

    }

    @Override
    public ILabel createLabel(String name) {

        CLabel label = new CLabel(name);
        centerPanel.add(label, new ALayoutConstraint(rowCounter++, 0));
        return label;

    }

    @Override
    public ITextField getFieldDescription() {

        return fieldDescription;

    }

    @Override
    public ITextField createFieldDescription() {

        fieldDescription = new CTextField(20);
        centerPanel.add(fieldDescription, null);
        return fieldDescription;

    }

    @Override
    public void resize() {

        // Window usually to wide (??)
        Dimension dd = centerPanel.getPreferredSize();
        dd.width = Math.min(500, dd.width);
        centerPanel.setPreferredSize(dd);
        centerPanel.revalidate();

    }

    @Override
    public IComboBox createCComboBox(MAttributeValue[] values) {

        CComboBox cb = new CComboBox(values);
        centerPanel.add(cb, null);
        return cb;

    }

    @Override
    public CEditor createNumberEditor(String name, boolean mandatory,
            boolean readOnly, boolean updateable, int number, String title) {

        VNumber ne = new VNumber(name, mandatory, readOnly, updateable, number, title);
       ne. addActionListener(this);
        centerPanel.add(ne, null);
        return ne;

    }

    @Override
    public ITextField createStringEditor(String name, boolean mandatory,
            boolean readOnly, boolean updateable, int displayLength,
            int fieldLength, String vFormat, String obscureType) {

        VString se = new VString(name, mandatory, readOnly, updateable, 
                displayLength, fieldLength, vFormat, obscureType);
        se.addActionListener(this);
        centerPanel.add(se, null);
        return se;

    }

    @Override
    public ILabel createGroupLabel(String name) {

        CLabel groupLabel = new CLabel(name);
        groupLabel.setFontBold(true);
        groupLabel.setHorizontalAlignment(SwingConstants.CENTER);
        centerPanel.add(groupLabel, new ALayoutConstraint(rowCounter++, 0));
        return groupLabel;

    }

    @Override
    public ITextField createFieldLotString() {

        fieldLotString  =
                new VString("Lot", false, false, true, 20, 20, null, null);
        centerPanel.add(fieldLotString, null);
        fieldLotString.removeActionListener(this);
        fieldLotString.addActionListener(this);
        return fieldLotString;

    }

    @Override
    public IComboBox createFieldLot(KeyNamePair[] lotKeyNamePairs) {

        fieldLot = new CComboBox(lotKeyNamePairs);
        fieldLot.addActionListener(this);
        centerPanel.add(fieldLot, null);

        fieldLot.addMouseListener(
                new VPAttributeDialogMouseAdapter(this)); // popup
        mZoom = new CMenuItem(Msg.getMsg(Env.getCtx(), "Zoom"),
                Env.getImageIcon("Zoom16.gif"));
        mZoom.addActionListener(this);
        popupMenu.add(mZoom);

        return fieldLot;

    }

    @Override
    public void createNewLotButton() {

        centerPanel.add(bLot, null);
        bLot.removeActionListener(this);
        bLot.addActionListener(this);

    }

    @Override
    public ITextField createFieldSerNo(String serNo) {

        fieldSerNo =  new VString("SerNo", false, false, true, 20, 20, null, null);
        centerPanel.add(fieldSerNo, null);
        fieldSerNo.addActionListener(this);
        return fieldSerNo;

    }

    @Override
    public void createNewSerNoButton() {

        centerPanel.add(bSerNo, null);
        bSerNo.removeActionListener(this);
        bSerNo.addActionListener(this);
        
    }

    @Override
    public IDate createFieldGuaranteeDate(String name) {

        fieldGuaranteeDate = new VDate("GuaranteeDate", false, false, true, DisplayType.Date,
                        name);
        centerPanel.add(fieldGuaranteeDate, null);
        fieldGuaranteeDate.removeActionListener(this);
        fieldGuaranteeDate.addActionListener(this);
        return fieldGuaranteeDate;

    }

    @Override
    public ITextField getFieldSerNo() {

        return fieldSerNo;

    }

    @Override
    public void showError(String string, String mandatoryMsg) {

        ADialog.error(myWindowNo, this, "FillMandatory", mandatoryMsg);


    }

    @Override
    public int getM_AttributeSetInstance_ID() {
        
        return controller.getAttributeSetInstanceId();
        
    }

    @Override
    public String getM_AttributeSetInstanceName() {
        
        return controller.getM_AttributeSetInstanceName();
        
    }

    @Override
    public void reset() {

        centerPanel.validate();
        
    }

}
