package org.adempiere.test;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Clock;

import javax.xml.stream.XMLStreamException;

import org.apache.tools.ant.taskdefs.optional.junitlauncher.TestExecutionContext;
import org.apache.tools.ant.taskdefs.optional.junitlauncher.TestResultFormatter;
import org.junit.platform.engine.TestExecutionResult;
import org.junit.platform.engine.UniqueId;
import org.junit.platform.engine.reporting.ReportEntry;
import org.junit.platform.launcher.TestIdentifier;
import org.junit.platform.launcher.TestPlan;

public class AdempiereXMLReportGeneratingListener 
            implements TestResultFormatter {
    
    public AdempiereXMLReportGeneratingListener() {
        
    }
    
    private Path reportsDir;
    private PrintWriter out;
    private Clock clock;

    private XmlReportData reportData;
    private OutputStream destination;
    private TestExecutionContext testExecutionContext;

    public AdempiereXMLReportGeneratingListener(Path reportsDir, PrintWriter out) {
        this(reportsDir, out, Clock.systemDefaultZone());
    }

    // For tests only
    AdempiereXMLReportGeneratingListener(String reportsDir, PrintWriter out, Clock clock) {
        this(Paths.get(reportsDir), out, clock);
    }

    private AdempiereXMLReportGeneratingListener(Path reportsDir, PrintWriter out, Clock clock) {
        this.reportsDir = reportsDir;
        this.out = out;
        this.clock = clock;
    }

    public void testPlanExecutionStarted(TestPlan testPlan) {
        this.reportData = new XmlReportData(testPlan, clock);
        try {
            Files.createDirectories(this.reportsDir);
        }
        catch (IOException e) {
            printException("Could not create reports directory: " + this.reportsDir, e);
        }
    }

    public void testPlanExecutionFinished(TestPlan testPlan) {
        this.reportData = null;
    }

    public void executionSkipped(TestIdentifier testIdentifier, String reason) {
        this.reportData.markSkipped(testIdentifier, reason);
        writeXmlReportInCaseOfRoot(testIdentifier);
    }

    public void executionStarted(TestIdentifier testIdentifier) {
        this.reportData.markStarted(testIdentifier);
    }

    public void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {
        this.reportData.addReportEntry(testIdentifier, entry);
    }

    public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult result) {
        this.reportData.markFinished(testIdentifier, result);
        writeXmlReportInCaseOfRoot(testIdentifier);
    }

    private void writeXmlReportInCaseOfRoot(TestIdentifier testIdentifier) {
        if (isRoot(testIdentifier)) {
            String rootName = UniqueId.parse(testIdentifier.getUniqueId()).getSegments().get(0).getValue();
            writeXmlReportSafely(testIdentifier, rootName);
        }
    }

    private void writeXmlReportSafely(TestIdentifier testIdentifier, String rootName) {
        Path xmlFile = this.reportsDir.resolve("TEST-Adempiere-" + rootName + ".xml");
        try (Writer fileWriter = Files.newBufferedWriter(xmlFile)) {
            new XmlReportWriter(this.reportData).writeXmlReport(testIdentifier, fileWriter);
        }
        catch (XMLStreamException | IOException e) {
            printException("Could not write XML report: " + xmlFile, e);
        }
    }

    private boolean isRoot(TestIdentifier testIdentifier) {
        return !testIdentifier.getParentId().isPresent();
    }

    private void printException(String message, Exception exception) {
        out.println(message);
        exception.printStackTrace(out);
    }

    public void close() throws IOException {

        // TODO Auto-generated method stub
        

    }

    public void setContext(TestExecutionContext context) {

        this.testExecutionContext = context;
        

    }

    public void setDestination(OutputStream outputStream) {


        this.destination = outputStream;
        

    }

    
}
