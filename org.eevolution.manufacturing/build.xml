<project name="ManufacturingManagement" default="zkdist" basedir="."
  xmlns:if="ant:if"
  xmlns:unless="ant:unless">
  
    <description>
        Building ManufacturingManagement.jar
        by
        bcahya
        http://sistematika.web.id
    </description>
  <!-- set global properties for this build -->
  <property file="build.properties"/>
  <import file="${adempiere.trunk}/utils_dev/properties.xml"/>
  <property name="src" location="${basedir}/src/main/java/base"/>
  <property name="srcSwing" location="${basedir}/src/main/java/ui/swing"/>
  <property name="build" location="${basedir}/build"/>
  <property name="dist"  location="${basedir}/dist"/>
  <property name="zksrc" value="${basedir}/src/main/java/ui/zk"/>
  <property name="zkclasses" value="${basedir}/build/zkwebui/WEB-INF/classes"/>

  <property name="test.src" value="src/test/java/base"/>
  <property name="test.build.dir" value="test/build"/>
  <property name="test.results.dir" value="test/test_results"/>
  <property name="base.test.build.dir" value="../base/test/build"/>
  <property name="base.build.dir" value="../base/build"/>

  <path id="compile.classpath">
    <pathelement location="${basedir}/build"/>
    <pathelement location="${adempiere.trunk}/zkwebui/WEB-INF/classes"/>
    <fileset dir="${adempiere.trunk}/lib">
      <include name="*.jar"/>
    </fileset>
  	 <fileset dir="${adempiere.trunk}/tools/lib">
  	      <include name="OpenForecast-0.5.0.jar"/>
  	 </fileset>
    <fileset dir="${adempiere.trunk}/zkwebui/WEB-INF/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="init" depends="clean">
    <echo message="Trunk location: ${adempiere.trunk}"/>
    <echo message="ADempiere home: ${env.ADEMPIERE_HOME}"/>
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create the classes directory structure used by compile -->
    <mkdir dir="${zkclasses}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac encoding="UTF-8" debug="true" srcdir="${src}:${srcSwing}" destdir="${build}">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="dist" depends="compile, integration-tests"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/lib/ManufacturingManagement.jar" basedir="${build}"/>

    <!-- Create target Libero deployment -->
    <mkdir dir="${env.ADEMPIERE_HOME}/packages/ManufacturingManagement/lib"/>

    <!-- Transfer ManufacturingManagement.jar -->
    <copy file="${dist}/lib/ManufacturingManagement.jar" todir="${env.ADEMPIERE_HOME}/packages/ManufacturingManagement/lib"/>
    <copy file="${dist}/lib/ManufacturingManagement.jar" todir="${adempiere.trunk}/packages/"/>
  </target>

  <target name="zkcompile" depends="dist"
        description="compile the source " >
    <!-- Compile the zk java code from ${src} into ${zkclasses} -->
    <javac encoding="UTF-8" debug="true" srcdir="${zksrc}" destdir="${zkclasses}">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="zkdist" depends="zkcompile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${zkclasses} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/lib/ManufacturingManagementZk.jar" basedir="${basedir}/build/zkwebui" includes="WEB-INF/"/>

    <!-- Create target Liberozk deployment -->
    <mkdir dir="${env.ADEMPIERE_HOME}/zkpackages/ManufacturingManagement/lib"/>

    <!-- Transfer liberozkMFG.jar -->
    <copy file="${dist}/lib/ManufacturingManagementZk.jar" todir="${env.ADEMPIERE_HOME}/zkpackages/ManufacturingManagement/lib"/>
    <copy file="${dist}/lib/ManufacturingManagementZk.jar" todir="${adempiere.trunk}/zkpackages/"/>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build}, ${dist} and ${zkclasses} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${zkclasses}"/>
  </target>
  
  <!-- =========================================== -->
  <!-- Tests                                       -->
  <!-- =========================================== -->

  <path id="test.class.path">
    <pathelement path="${build}"/>
    <pathelement location="${test.build.dir}"/>
    <pathelement location="${base.test.build.dir}"/>
    <fileset dir="${adempiere.base}/base" includes="Base.jar"/>
    <fileset dir="../lib" includes="**/*.jar"/>
    <fileset dir="../tools/lib/junit" includes="**/*.jar"/>
    <fileset dir="../tools/lib/testing" includes="**/*.jar"/>
  </path>
    
  <target name="check.tests">
    <condition property="unitTests.run">
        <and>
            <istrue value="${test.performTests}"/>
            <istrue value="${test.performUnitTests}"/>
        </and>
    </condition>
    <condition property="integrationTests.run">
        <and>
            <istrue value="${test.performTests}"/>
            <istrue value="${test.performIntegrationTests}"/>
        </and>
    </condition>
  </target>
    
  <target name="alertIfTestSkipped" depends="check.tests" unless="${test.performTests}">
    <echo message="Tests will not be performed. See adempiere/utils_dev/test.properties."/>     
  </target>
    
  <target name="clean.tests" depends="alertIfTestSkipped" if="${test.performTests}">
    <delete dir="${test.build.dir}"/>
    <delete dir="${test.results.dir}"/>
  </target>

  <target name="compile.test" depends="compile, clean.tests"
        if="${test.performTests}">
    <mkdir dir="${test.build.dir}"/>
    <javac target="11" encoding="UTF-8" fork="true" includeantruntime="false"
        destdir="${test.build.dir}" deprecation="on" debug="on" 
        memoryinitialsize="512m" memorymaximumsize="512m">
      <src path="${test.src}"/>
      <classpath refid="test.class.path"/>
    </javac>        
  </target>
    
  <target name="alertIfUnitTestSkipped" depends="check.tests" unless="unitTests.run">
    <echo if:true="${test.performTests}">
"===> Unit tests will not be performed. See adempiere/utils_dev/test.properties."</echo>
  </target>

  <target name="alertIfIntegrationTestSkipped" depends="check.tests" 
        unless="integrationTests.run">
    <echo if:true="${test.performTests}">
"===> Integration tests will not be performed. See adempiere/utils_dev/test.properties."</echo> 
  </target>
    
  <target name="unit-tests" depends="compile.test, alertIfUnitTestSkipped" if="unitTests.run">
    <mkdir dir="${basedir}/${test.results.dir}"/>       
    <junitlauncher 
        printsummary="false" 
        haltonfailure="yes" 
        failureproperty="test.failed"
        excludeTags="IntegrationTest">
      <classpath refid="test.class.path"/>
      <testclasses outputdir="${basedir}/${test.results.dir}">
        <fileset dir="${test.build.dir}"/>
        <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
        <listener classname="org.adempiere.test.AdempiereTestExecutionListener"
            sendSysErr="true" sendSysOut="true"/>
        <fork/>
      </testclasses>
    </junitlauncher>
  </target>

    
  <target name="integration-tests" depends="unit-tests, alertIfIntegrationTestSkipped" 
        if="integrationTests.run">
    <mkdir dir="${basedir}/${test.results.dir}"/>       
    <junitlauncher 
        printsummary="false" 
        haltonfailure="yes" 
        failureproperty="test.failed"
        excludeTags="UnitTest">
      <classpath refid="test.class.path"/>
      <testclasses outputdir="${basedir}/${test.results.dir}">
        <fileset dir="${test.build.dir}"/>
        <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
        <listener classname="org.adempiere.test.AdempiereTestExecutionListener"
            sendSysErr="true" sendSysOut="true"/>
        <fork/>
      </testclasses>            
    </junitlauncher>
  </target>
    
</project>
